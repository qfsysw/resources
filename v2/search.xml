<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/01/hello-world/"/>
      <url>/2024/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo githubio</title>
      <link href="/2024/05/28/hexo-githubio/"/>
      <url>/2024/05/28/hexo-githubio/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h1><p>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo server</p><h1 id="key配置"><a href="#key配置" class="headerlink" title="key配置"></a>key配置</h1><p>ssh-keygen -t ed25519 -C “<a href="mailto:&#101;&#x6d;&#x61;&#x69;&#x6c;&#x40;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#101;&#x6d;&#x61;&#x69;&#x6c;&#x40;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a>“<br>添加key到github</p><p>err<br><a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.</p><h1 id="配置GitHub仓库"><a href="#配置GitHub仓库" class="headerlink" title="配置GitHub仓库"></a>配置GitHub仓库</h1><p>在GitHub上创建一个新的仓库，其名称应该是 用户名.github.io，其中用户名是你的GitHub用户名。<br> git config –global user.email “<a href="mailto:&#x78;&#120;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;">&#x78;&#120;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;</a>“<br> git config –global user.name “user”</p><h1 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h1><p>deploy:<br>  type: git<br>  repo: <repository url> # 替换为你的GitHub仓库url<br>  branch: master</p><h1 id="安装hexo-deployer-git插件："><a href="#安装hexo-deployer-git插件：" class="headerlink" title="安装hexo-deployer-git插件："></a>安装hexo-deployer-git插件：</h1><p>npm install hexo-deployer-git –save</p><h1 id="部署到GitHub："><a href="#部署到GitHub：" class="headerlink" title="部署到GitHub："></a>部署到GitHub：</h1><p>hexo clean<br>hexo g #hexo generate<br>hexo d #hexo deploy</p><!-- ​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240528.jpg"> --><h1 id="建立仓库-testhtml"><a href="#建立仓库-testhtml" class="headerlink" title="建立仓库 testhtml"></a>建立仓库 testhtml</h1><p>Settings -&gt; pages</p><p><a href="https://xxx.github.io/testhtml/index.html">https://xxx.github.io/testhtml/index.html</a></p>   <!--    秃了也弱了   -    name: github    icon: github    path: https://github.com/leedom92/hexo-theme-leedom    target: _blank  -    name: email    icon: envelope    path:   -    name: facebook    icon: facebooksquare    path:  -    name: twitter    icon: twitter    path:  -    name: wechat    icon: wechat    path:  -    name: weibo    icon: weibo    path:  -    # rss需安装 hexo-generator-feed 插件    # 具体参照https://github.com/hexojs/hexo-generator-feed    name: rss    icon: rss    path: /atom.xml    target: _blank -->]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNetty ByteBuffer</title>
      <link href="/2024/05/23/DotNetty-ByteBuffer/"/>
      <url>/2024/05/23/DotNetty-ByteBuffer/</url>
      
        <content type="html"><![CDATA[<p><strong>DotNetty</strong>是一个高性能的.NET网络通信框架，基于Netty，支持TCP、UDP、HTTP、WebSocket等协议。适用于高并发、低延迟场景，如实时通信、游戏服务器、IoT应用及大型分布式系统，通过异步I&#x2F;O、零拷贝等技术提升性能，具备易用性、可扩展性。<br>架构上，围绕Channel、EventLoop、ChannelPipeline、ChannelHandlerContext设计，包含Transport、Codec、Handler等模块，简化网络编程，加速数据传输处理。</p><p><strong>ByteBuffer</strong> 用于高效处理字节数据，固定容量，通过allocate或wrap创建。涉及position和limit追踪读写位置，提供get&#x2F;put等读写方法，flip切换读写模式，clear清空缓冲区，compact移动数据并准备下一轮读写，适用于高性能IO与网络通信。.</p><p><strong>优点</strong><br>零拷贝通过复合缓冲区实现。<br>动态容量增长。<br>无需flip切换读写模式。<br>分离读写索引。<br>内置引用计数。<br>支持缓冲区池化。<br>优化网络通信中的字节处理。</p><p><strong>结构</strong><br>readerIndex 读取，随读增。<br>writerIndex 写入，随写增。<br>capacity容量。</p><p><strong>ByteBuffer属性</strong><br>readIndex：下一个读位<br>writeIndex：下一个写位置<br>capacity：容量<br>0：缓冲区开始位置</p><p>已经读取的区域：[0,readerindex)<br>可读取的区域：[readerindex,writerIndex)<br>可写的区域: [writerIndex,capacity)<br>读写独立索引，操作命名区分（read&#x2F;write自动进，get&#x2F;set不影响索引）。<br>支持设定最大容量，超限写操作将抛异常，默认上限Integer.MAX_VALUE。<br>readerIndex writerIndex 本质为灵活高效字节容器</p><p><strong>堆缓冲区</strong><br>最常用的 ByteBuffer 模式是将数据存储在堆空间中。这种模式被称为支撑数组（backing array），它能在没有使用池化的情况下提供快速的分配和释放。可以由 hasArray() 来判断检查 ByteBuffer是否由数组支撑。如果不是，则这是一个直接缓冲区。</p><p><strong>直接缓冲区</strong><br>直接缓冲区是另外一种 ByteBuffer 模式。<br>直接缓冲区的主要缺点是，相对于基于堆的缓冲区，它们的分配和释放都较为昂贵。</p><p><strong>复合缓冲区</strong><br>复合缓冲区 CompositeByteBuf，它为多个 ByteBuffer提供一个聚合视图。比如 HTTP 协议， 分为消息头和消息体，这两部分可能由应用程序的不同模块产生，各有各的 ByteBuffer，将会在消息被发送的时候组装为一个 ByteBuffer，此时可以将这两个 ByteBuffer聚合为一个 CompositeByteBuf，然后使用统一和通用的 ByteBuffer API 来操作。</p><p>如何在的程序中获得 ByteBuf 的实例，并使用它呢？Netty 提供了两种方式</p><p><strong>ByteBufAllocator 接口</strong><br>ByteBufAllocator 分配任意类型的 ByteBuffer 实例。</p><p>buffer(): 基于堆&#x2F;直接内存ByteBuffer。<br>heapBuffer(): 仅堆内存。<br>directBuffer(): 仅直接内存。<br>compositeBuffer(): 可组合多个缓冲区，支持堆&#x2F;直接内存。<br>ioBuffer(): 适配I&#x2F;O操作，优先直接内存(需Unsafe支持)。<br>ByteBufAllocator：<br>Channel ChannelHandlerContext</p><p><strong>Unpooled 缓冲区</strong></p><p>Unpooled工具类助创ByteBuffer<br> buffer()：堆内存ByteBuffer<br> directBuffer()：直接内存ByteBuffer<br> wrappedBuffer()：包装数据的ByteBuffer<br> copiedBuffer()：复制数据的ByteBuffer 适用范围广泛，不仅限于Netty网络项目。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IByteBuffer byteBuf = Unpooled.CopiedBuffer(<span class="string">&quot;hello,world!&quot;</span>, Encoding.UTF8); </span><br></pre></td></tr></table></figure><p><strong>ByteBuf访问&#x2F;读写</strong><br>索引从0开始至capacity()-1。<br>随机访问（get&#x2F;set）不改索引，需显式调用readerIndex()&#x2F;writerIndex()移动。<br>顺序访问分两类：<br>get&#x2F;set：固定索引，读写数据不移位。<br>read&#x2F;write：自动调整readerIndex&#x2F;writerIndex。</p><p>isReadable() 如果至少有一个字节可供读取，则返回 true<br>isWritable() 如果至少有一个字节可被写入，则返回 true<br>readableBytes() 返回可被读取的字节数<br>writableBytes() 返回可被写入的字节数<br>capacity() 返回 ByteBuffer 可容纳的字节数。在此之后，它会尝试再次扩展直到达到<br>maxCapacity()<br>maxCapacity() 返回 ByteBuffer 可以容纳的最大字节数<br>hasArray() 如果 ByteBuffer 由一个字节数组支撑，则返回 true<br>array() 如果 ByteBuffer 由一个字节数组支撑则返回该数组</p><p><strong>可丢弃字节</strong><br>读操作后，字节积累在”可丢弃”段，始于readerIndex。<br>discardReadBytes()释放已读字节，回收空间，可能导致之前数据移动。<br>此操作可能涉及内存复制，谨慎使用。</p><p><strong>可读字节</strong>：存储实际数据，新缓冲区默认从readerIndex&#x3D;0开始。<br><strong>可写字节</strong>：空白区域待写入，新缓冲区writerIndex初设0，写操作后自动递增。</p><p><strong>资源释放</strong><br>处理Netty入站ByteBuffer ，可选自动释放：用SimpleChannelInboundHandler，或在channelRead()末手动调用ReferenceCountUtil.release(msg)确保资源管理。</p><!--对于**入站请求**，Netty中处理Channel读操作时自动分配的ByteBuffer ，确实需要正确管理其生命周期以避免内存泄漏。主要有两种推荐做法来确保ByteBuf的释放：使用SimpleChannelInboundHandler：这个Handler类在处理完消息后会自动释放ByteBuffer 。它通过重写了channelReadComplete()方法来调用release()释放消息，因此你不需要在channelRead()方法里手动释放。手动释放：如果你不使用SimpleChannelInboundHandler，而是在其他类型的ChannelInboundHandler中处理消息，就需要在channelRead()方法结束前手动调用ReferenceCountUtil.release(msg)来释放ByteBuffer 。简而言之，确保ByteBuffer 释放的两种方式可总结为：“利用SimpleChannelInboundHandler自动管理”或“在channelRead()末手动释放”。--><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> DotNetty.Buffers;</span><br><span class="line"><span class="keyword">using</span> DotNetty.Transport.Channels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommanChannelInboundHandler</span> : <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">object</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ChannelRead</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> shouldRelease = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsMessageAcceptable(message))</span><br><span class="line">            &#123;</span><br><span class="line">                ChannelRead0(context, message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                shouldRelease = <span class="literal">false</span>;</span><br><span class="line">                context.FireChannelRead(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (AutoRelease &amp;&amp; shouldRelease)</span><br><span class="line">            &#123;</span><br><span class="line">                ResourceUtil.Release(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsMessageAcceptable</span>(<span class="params"><span class="built_in">object</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> msg <span class="keyword">is</span> IByteBuffer; <span class="comment">// 假设只处理IByteBuffer类型的消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ChannelRead0</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//IByteBuffer ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> AutoRelease &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<strong>出站请求</strong>，不管 ByteBuffer 是否由我们的业务创建的，当调用了 write 或者 writeAndFlush 方法后，Netty 会自动替我们释放，不需要我们业务代码自行释放。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ByteBuf对象，初始容量为1，内部动态扩容以容纳更多数据</span></span><br><span class="line">IByteBuffer byteBuf = Unpooled.Buffer(<span class="number">1</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    byteBuf.WriteByte(i);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(byteBuf.GetByte(i));</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(byteBuf.ReadByte());</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//byteBuf2</span></span><br><span class="line"><span class="comment">// 使用Unpooled工具类创建ByteBuf，内容为&quot;hello,world!&quot;</span></span><br><span class="line">IByteBuffer byteBuf2 = Unpooled.CopiedBuffer(<span class="string">&quot;hello,world!&quot;</span>, Encoding.UTF8); <span class="comment">// Unpooled.CopiedBuffer(&quot;hello,world!&quot;, Encoding.UTF8);</span></span><br><span class="line"><span class="comment">// 使用相关的方法</span></span><br><span class="line"><span class="keyword">if</span> (byteBuf2.HasArray) <span class="comment">// if (byteBuf2.HasArray)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] content = byteBuf2.Array;</span><br><span class="line">    <span class="comment">// 将content转成字符串</span></span><br><span class="line">    Console.WriteLine(Encoding.UTF8.GetString(content));</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;byteBuf2=&quot;</span> + byteBuf2);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(byteBuf2.GetByte(<span class="number">0</span>)); <span class="comment">// 获取数组0这个位置的字符&#x27;h&#x27;的ASCII码，h=104</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> len = byteBuf2.ReadableBytes; <span class="comment">// 可读的字节数 12</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;len=&quot;</span> + len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用for取出各个字节并转换为对应的字符打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine((<span class="built_in">char</span>)byteBuf2.GetByte(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 范围读取</span></span><br><span class="line">    Console.WriteLine(byteBuf2.GetCharSequence(<span class="number">0</span>, <span class="number">6</span>, Encoding.UTF8));</span><br><span class="line">    Console.WriteLine(byteBuf2.GetCharSequence(<span class="number">6</span>, <span class="number">6</span>, Encoding.UTF8));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//byteBuf3 WrappedBuffer</span></span><br><span class="line"><span class="keyword">var</span> str1 = Encoding.UTF8.GetBytes(<span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> byteBuf3 = Unpooled.WrappedBuffer(str1);</span><br><span class="line"><span class="keyword">if</span> (byteBuf3.HasArray) <span class="comment">// if (byteBuf2.HasArray)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] content = byteBuf3.Array;</span><br><span class="line">    <span class="comment">// 将content转成字符串</span></span><br><span class="line">    Console.WriteLine(Encoding.UTF8.GetString(content));</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;byteBuf3=&quot;</span> + byteBuf3);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(byteBuf3.GetByte(<span class="number">0</span>)); <span class="comment">// 获取数组0这个位置的字符&#x27;h&#x27;的ASCII码，h=104</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> len = byteBuf3.ReadableBytes; <span class="comment">// 可读的字节数 12</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;len=&quot;</span> + len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用for取出各个字节并转换为对应的字符打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine((<span class="built_in">char</span>)byteBuf3.GetByte(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 范围读取</span></span><br><span class="line">    Console.WriteLine(byteBuf3.GetCharSequence(<span class="number">0</span>, <span class="number">6</span>, Encoding.UTF8));</span><br><span class="line">    Console.WriteLine(byteBuf3.GetCharSequence(<span class="number">6</span>, <span class="number">6</span>, Encoding.UTF8));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果得出 get操作 readerIndex 不变，read操作使其移动。</p><p>End</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c# run nodejs</title>
      <link href="/2024/05/20/nodejs-run-c/"/>
      <url>/2024/05/20/nodejs-run-c/</url>
      
        <content type="html"><![CDATA[<p>在C#中调用Node.js时，一种常见的方法是使用进程间通信（Inter-Process Communication，IPC），例如使用子进程。<br>可以使用C#中的Process类来启动Node.js进程，并通过标准输入输出与其进行通信。</p><h1 id="C-run-nodejs"><a href="#C-run-nodejs" class="headerlink" title="C# run nodejs"></a>C# run nodejs</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听来自标准输入的消息</span></span><br><span class="line">process.<span class="property">stdin</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收到消息后，在控制台输出并回复消息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message from C#: &quot;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    process.<span class="property">stdout</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello from Node.js!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ProcessStartInfo startInfo = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">startInfo.FileName = <span class="string">&quot;node&quot;</span>; <span class="comment">// Node.js可执行文件路径，如果已在系统路径中，则不需要提供完整路径</span></span><br><span class="line">startInfo.Arguments = <span class="string">&quot;n.js&quot;</span>; <span class="comment">// 执行的Node.js脚本文件路径</span></span><br><span class="line">startInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">startInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">startInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">Process nodeProcess = <span class="keyword">new</span> Process();</span><br><span class="line">nodeProcess.StartInfo = startInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动进程</span></span><br><span class="line">nodeProcess.Start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与Node.js进程进行通信</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = nodeProcess.StandardInput)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (writer.BaseStream.CanWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 向Node.js进程发送消息</span></span><br><span class="line">        writer.WriteLine(<span class="string">&quot;Hello from C#!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取Node.js进程的输出</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = nodeProcess.StandardOutput)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (reader.BaseStream.CanRead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从Node.js进程读取响应</span></span><br><span class="line">        <span class="built_in">string</span> response = reader.ReadLine();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Response from Node.js: &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.Read();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待Node.js进程结束</span></span><br><span class="line">nodeProcess.WaitForExit();</span><br><span class="line">nodeProcess.Close();</span><br></pre></td></tr></table></figure><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = net.<span class="title function_">createServer</span>(<span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 连接建立时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Client connected.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听客户端发送的数据</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received from client: &#x27;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向客户端发送响应数据</span></span><br><span class="line">        socket.<span class="title function_">write</span>(<span class="string">&#x27;Hello from Node.js!&#x27;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听连接断开事件</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Client disconnected.&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听指定端口</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">24520</span>;</span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Node Server listening on port &#x27;</span> + port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动 Node.js 服务器的 Node.js 脚本文件路径</span></span><br><span class="line"><span class="built_in">string</span> nodeScriptPath = <span class="string">&quot;n.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 Node.js 进程</span></span><br><span class="line">ProcessStartInfo startInfo = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">startInfo.FileName = <span class="string">&quot;node&quot;</span>; <span class="comment">// Node.js 可执行文件路径，如果已在系统路径中，则不需要提供完整路径</span></span><br><span class="line">startInfo.Arguments = nodeScriptPath; <span class="comment">// Node.js 脚本文件路径</span></span><br><span class="line">startInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">startInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">Process nodeProcess = <span class="keyword">new</span> Process();</span><br><span class="line">nodeProcess.StartInfo = startInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node.js 服务器输出的事件处理函数</span></span><br><span class="line">nodeProcess.OutputDataReceived += (sender, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(e.Data); <span class="comment">// 输出 Node.js 服务器的输出信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动进程</span></span><br><span class="line">nodeProcess.Start();</span><br><span class="line">nodeProcess.BeginOutputReadLine(); <span class="comment">// 开始异步读取 Node.js 服务器的输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待 Node.js 进程结束</span></span><br><span class="line">nodeProcess.WaitForExit();</span><br><span class="line">nodeProcess.Close();</span><br></pre></td></tr></table></figure><p><strong>run</strong></p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到 Node.js 服务器的地址和端口</span></span><br><span class="line"><span class="built_in">string</span> serverAddress = <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">// 本地地址</span></span><br><span class="line"><span class="built_in">int</span> serverPort = <span class="number">24520</span>; <span class="comment">// Node.js 服务器端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 TcpClient 实例</span></span><br><span class="line"><span class="keyword">using</span> (TcpClient client = <span class="keyword">new</span> TcpClient(serverAddress, serverPort))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取用于向服务器发送数据的网络流</span></span><br><span class="line">    <span class="keyword">using</span> (NetworkStream stream = client.GetStream())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 发送数据到服务器</span></span><br><span class="line">        <span class="built_in">string</span> message = <span class="string">&quot;hi from C#!&quot;</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] data = Encoding.ASCII.GetBytes(message);</span><br><span class="line">        stream.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sent: &quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取服务器的响应</span></span><br><span class="line">        <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">int</span> bytesRead = stream.Read(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">        <span class="built_in">string</span> response = Encoding.ASCII.GetString(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Received: &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>run</strong></p><h1 id="nodejs-run-c"><a href="#nodejs-run-c" class="headerlink" title="nodejs run c#"></a>nodejs run c#</h1><p>Node.js 使用 child_process.exec() 函数执行 c# exe</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;hi c# &quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runc.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 hello.exe</span></span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;ConNode.exe&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行错误: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行错误: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`C# 输出: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>run</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node runc.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> .net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian nginx https</title>
      <link href="/2024/05/07/Debian-Nginx/"/>
      <url>/2024/05/07/Debian-Nginx/</url>
      
        <content type="html"><![CDATA[<p>debian安装 nginx<br>在Debian系统上安装Nginx，你可以按照以下步骤操作：</p><p>sudo: command not found</p><p>apt-get install sudo</p><p>首先，更新你的包索引：   </p><p>sudo apt update<br>接下来，安装Nginx：</p><p>sudo apt install nginx</p><p>安装完成后，启动Nginx服务：</p><p>sudo systemctl start nginx<br>（可选）设置Nginx开机自启动：</p><p>sudo systemctl enable nginx<br>你可以通过运行以下命令来检查Nginx的状态：</p><p>sudo systemctl status nginx<br>现在，你可以在Web浏览器中输入你服务器的IP地址或域名来访问默认的Nginx欢迎页面。如果你是在本地安装的Nginx，你可以通过访问 <a href="http://localhost/">http://localhost</a> 来查看这个页面。</p><p>如果你需要配置Nginx，你可以编辑 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 文件或者在 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F; 目录下创建或编辑配置文件，并使用 sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;your-config &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F; 命令来启用它。</p><p>sudo whereis nginx<br>Nginx 默认安装位置<br>配置文件所在目录 &#x2F;etc&#x2F;</p><p>nginx配置<br> 检测Nginx配置文件是否正确<br> nginx -t</p><p>重载Nginx配置<br>nginx -s reload</p><p> 自定义Nginx站点配置文件存放目录<br>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</p><p>nginx网站目录<br>&#x2F;var&#x2F;www&#x2F;</p><p>域名证书</p><p>阿里云证书<br>免费证书<br><a href="https://help.aliyun.com/zh/ssl-certificate/user-guide/overview-of-free-certificates-overview-of-free-certificates">https://help.aliyun.com/zh/ssl-certificate/user-guide/overview-of-free-certificates-overview-of-free-certificates</a><br><a href="https://yundun.console.aliyun.com/?p=cas#/certExtend/free/cn-hangzhou">https://yundun.console.aliyun.com/?p=cas#/certExtend/free/cn-hangzhou</a></p><p>服务器类型<br>Nginx<br>Tomcat<br>Apache<br>ls<br>JKS<br>其他</p><p>根证书下载<br>证书格式<br>pem&#x2F;key<br>pfx<br>crt&#x2F;key<br>pfx<br>jks<br>pem&#x2F;key<br>crt&#x2F;cer</p><p>Nginx部署<br><a href="https://help.aliyun.com/zh/ssl-certificate/user-guide/install-ssl-certificates-on-nginx-servers-or-tengine-servers">https://help.aliyun.com/zh/ssl-certificate/user-guide/install-ssl-certificates-on-nginx-servers-or-tengine-servers</a>?</p><p> ls &#x2F;root&#x2F;cerf&#x2F;<a href="http://www.dtso.net.pem/">www.dtso.net.pem</a></p><p>nginx -s reload  #重新载入配置文件。<br>说明<br>报错the “ssl” parameter requires ngx_http_ssl_module：您需要重新编译Nginx并在编译安装的时候加上–with-http_ssl_module配置。</p><p>报错”&#x2F;cert&#x2F;3970497_demo.aliyundoc.com.pem”:BIO_new_file() failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen(‘&#x2F;cert&#x2F;3970497_demo.aliyundoc.com.pem’,’r’) error:2006D080:BIO routines:BIO_new_file:no such file)：您需要去掉证书相对路径最前面的&#x2F;。例如，您需要去掉&#x2F;cert&#x2F;cert-file-name.pem最前面的&#x2F;，使用正确的相对路径cert&#x2F;cert-file-name.pem。</p><p>nginx -s reload</p><p>域名443安全组 防火墙开启~ 443 443 443</p><p>.conf 示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">       listen       443 ssl http2;  </span><br><span class="line">       listen       [::]:443 ssl http2;  </span><br><span class="line">       server_name  www.x.com;  </span><br><span class="line"> </span><br><span class="line">       ssl_certificate      /root/cerf/www.x.com.pem;  </span><br><span class="line">       ssl_certificate_key  /root/cerf/www.x.com.key;  </span><br><span class="line"> </span><br><span class="line">       ssl_protocols TLSv1.2 TLSv1.3;  </span><br><span class="line">       ssl_ciphers HIGH:!aNULL:!MD5;  </span><br><span class="line"> </span><br><span class="line">       ssl_prefer_server_ciphers on;  </span><br><span class="line"> </span><br><span class="line">       <span class="comment"># HSTS (optional)  </span></span><br><span class="line">       add_header Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains; preload&quot;</span>;  </span><br><span class="line"> </span><br><span class="line">       <span class="comment"># SSL session cache (optional)  </span></span><br><span class="line">       ssl_session_cache    shared:SSL:10m;  </span><br><span class="line">       ssl_session_timeout  10m;  </span><br><span class="line"> </span><br><span class="line">       <span class="comment"># SSL stapling (optional, if you use OCSP)  </span></span><br><span class="line">       <span class="comment"># ssl_stapling on;  </span></span><br><span class="line">       <span class="comment"># ssl_stapling_verify on;  </span></span><br><span class="line"> </span><br><span class="line">       <span class="comment"># DH param is dependent on certificate size  </span></span><br><span class="line">       <span class="comment">#ssl_dhparam /path/to/dhparam.pem;  </span></span><br><span class="line"> </span><br><span class="line">       location / &#123;  </span><br><span class="line">           root   /usr/share/nginx/html;  </span><br><span class="line">           index  index.html index.htm;  </span><br><span class="line">       &#125;  </span><br><span class="line"> </span><br><span class="line">       <span class="comment"># other locations...  </span></span><br><span class="line"> </span><br><span class="line">       <span class="comment"># Redirect non-https to https  </span></span><br><span class="line">       <span class="comment"># server &#123;  </span></span><br><span class="line">       <span class="comment">#     listen 80;  </span></span><br><span class="line">       <span class="comment">#     server_name your.domain.com;  </span></span><br><span class="line">       <span class="comment">#     return 301 https://$host$request_uri;  </span></span><br><span class="line">       <span class="comment"># &#125;  </span></span><br><span class="line"> </span><br><span class="line">       <span class="comment"># Error handling  </span></span><br><span class="line">       error_page   500 502 503 504  /50x.html;  </span><br><span class="line">       location = /50x.html &#123;  </span><br><span class="line">           root   /usr/share/nginx/html;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><!--159-TCP: 443TCP: 80TCP:1234TCP:123TCP:8090TCP:50501TCP:6379TCP:8080TCP:8880TCP: 30306TCP: 27145TCP:3389TCP: 22TCP:4000117-1123123451234123600260011111188882280443--><p>网络测试</p><p><a href="https://boce.aliyun.com/detect/dns">https://boce.aliyun.com/detect/dns</a></p><ul><li></li></ul><h1 id="debian-卸载-nginx"><a href="#debian-卸载-nginx" class="headerlink" title="debian 卸载 nginx"></a>debian 卸载 nginx</h1><p>在Debian系统中，要卸载nginx，你可以使用apt-get命令。以下是具体步骤：</p><p>首先，你需要知道nginx是否是通过apt安装的。你可以使用以下命令查看已安装的nginx包：</p><p>dpkg -l | grep nginx<br>如果nginx是通过apt安装的，你可以使用apt-get命令来卸载它：</p><p>sudo apt-get remove nginx nginx-common<br>这将会卸载nginx及其配置文件。</p><p>为了清除所有nginx的配置文件和依赖，你可以执行：</p><p>sudo apt-get purge nginx nginx-common<br>最后，你可以运行以下命令来清除无用的包和依赖：</p><p>sudo apt-get autoremove<br>确保在执行这些步骤之前，你已经停止了nginx服务：</p><p>sudo systemctl stop nginx<br>如果nginx是通过其他方式安装的，比如编译安装，那么你需要手动删除nginx或者按照其安装方式来卸载。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Debian Nodejs HEXO</title>
      <link href="/2024/05/03/Debian-hexo/"/>
      <url>/2024/05/03/Debian-hexo/</url>
      
        <content type="html"><![CDATA[<p>Debian Nodejs HEXO </p><h1 id="安装Node-js环境"><a href="#安装Node-js环境" class="headerlink" title="安装Node.js环境"></a>安装Node.js环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>debian安装最新node v20.12.0<br>在Debian系统上安装特定版本的Node.js（例如v20.12.0），你可以使用NodeSource二进制分发。以下是安装v20.12.0的步骤：</p><p>首先，打开终端。</p><p>使用curl下载NodeSource的安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -</span><br></pre></td></tr></table></figure><p>安装Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>验证Node.js是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><p>如果你想要确保安装了特定的v20.12.0版本，可以在安装完Node.js后运行以下命令来验证版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果显示的版本号是v20.12.0，则表示已经成功安装了该版本。</p><h1 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h1><p>使用npm包管理器，直接安装hexo </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h1 id="hexo-修改端口号"><a href="#hexo-修改端口号" class="headerlink" title="hexo 修改端口号"></a>hexo 修改端口号</h1><p>_config.yml  # 或者使用 vim _config.yml</p><h2 id="Docs-https-hexo-io-docs-server-html"><a href="#Docs-https-hexo-io-docs-server-html" class="headerlink" title="Docs: https://hexo.io/docs/server.html"></a>Docs: <a href="https://hexo.io/docs/server.html">https://hexo.io/docs/server.html</a></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12311</span>  <span class="comment"># 修改这里为你想要的端口号</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Debian Gnome-Desktop GUI </title>
      <link href="/2024/04/26/Debian-Gnome-Desktop-GUI/"/>
      <url>/2024/04/26/Debian-Gnome-Desktop-GUI/</url>
      
        <content type="html"><![CDATA[<p>debian   gnome-desktop</p><h1 id="🌞更新"><a href="#🌞更新" class="headerlink" title="🌞更新"></a>🌞更新</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">[2024042601]</span><br><span class="line">sudo apt -y upgrade</span><br></pre></td></tr></table></figure><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/2024042602.jpg"></p><h1 id="🎨安装"><a href="#🎨安装" class="headerlink" title="🎨安装"></a>🎨安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install task-gnome-desktop</span><br></pre></td></tr></table></figure><p> 这个过程比较久</p><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/2024042603.jpg"></p><h1 id="🍎分配"><a href="#🍎分配" class="headerlink" title="🍎分配"></a>🍎分配</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl set-default graphical.target</span><br><span class="line">vi /etc/pam.d/gdm-password</span><br><span class="line">``` bash</span><br><span class="line">注释 auth required pam_succeed_if.so user != root quiet_success</span><br><span class="line">``` bash</span><br><span class="line"><span class="comment">#auth required pam_succeed_if.so user != root quiet_success</span></span><br></pre></td></tr></table></figure><h1 id="🛋️重启"><a href="#🛋️重启" class="headerlink" title="🛋️重启"></a>🛋️重启</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h1 id="🔑通过VNC连接"><a href="#🔑通过VNC连接" class="headerlink" title="🔑通过VNC连接"></a>🔑通过VNC连接</h1><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/2024042604.jpg"></p><p>配置后</p><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/2024042605.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian Docker Redis </title>
      <link href="/2024/04/12/debian-docker-reids/"/>
      <url>/2024/04/12/debian-docker-reids/</url>
      
        <content type="html"><![CDATA[<p>Debian安装docker</p><h1 id="1-使用官方脚本自动安装docker"><a href="#1-使用官方脚本自动安装docker" class="headerlink" title="1.使用官方脚本自动安装docker"></a>1.使用官方脚本自动安装docker</h1><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><p>如果安装提示</p><p>-bash sudo command not found</p><p>则需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#update</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sudo</span><br></pre></td></tr></table></figure><p>再执行安装脚本1</p><p>安装成功后可以输入 docker命令查看docker版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#version</span></span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>能查到表明安装成功</p><h1 id="2-pull-redis"><a href="#2-pull-redis" class="headerlink" title="2.pull redis"></a>2.pull redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pull redis</span></span><br><span class="line">docker pull redis:latest</span><br><span class="line">pull redis镜像</span><br></pre></td></tr></table></figure><h1 id="3-创建reids容器"><a href="#3-创建reids容器" class="headerlink" title="3.创建reids容器"></a>3.创建reids容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h1 id="4-测试redis"><a href="#4-测试redis" class="headerlink" title="4.测试redis"></a>4.测试redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-test /bin/bash </span><br><span class="line">redis-cli</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">test</span> 1 </span><br><span class="line">get <span class="built_in">test</span> </span><br><span class="line"><span class="built_in">set</span> <span class="built_in">test</span> 1</span><br></pre></td></tr></table></figure><p>提示ok</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get <span class="built_in">test</span> </span><br></pre></td></tr></table></figure><p>一些命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#images</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line">docker pull redis:latest</span><br><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br><span class="line"><span class="comment">#test redis</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-test /bin/bash - </span><br><span class="line">redis-cli</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">test</span> 1 </span><br><span class="line">get <span class="built_in">test</span> </span><br></pre></td></tr></table></figure><p>docker desktop也可以通过命令安装</p><p>安装完后可以在容器列表查看</p><!--redis可以实现轻量消息队列计数器 全局自增 分布式ID分布式锁 GEO-->]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Debian </tag>
            
            <tag> Reids </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker MySQL </title>
      <link href="/2024/04/11/Docker-MySQL/"/>
      <url>/2024/04/11/Docker-MySQL/</url>
      
        <content type="html"><![CDATA[<p>1.下载docker desktop<br><a href="https://www.docker.com/products/docker-desktop/">https://www.docker.com/products/docker-desktop/</a></p><ol start="2"><li>创建容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br></pre></td></tr></table></figure>创建并启动mysql容器</li></ol><p>–name 容器名字 </p><p>-d 后台运行容器</p><p>-p 映射端口</p><p>-e 参数</p><p>截至目前最新的mysql是mysql8.0.36 那就整这个试下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql-container -e TZ=UTC -p 30306:3306 -e MYSQL_ROOT_PASSWORD=你的密码 mysql:8.0.36-debian</span><br></pre></td></tr></table></figure><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411a.jpg"></p><p>等待一会，看到mysql已经pull下来。</p><p>回到docker看到容器已经创建。</p><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411b.jpg"></p><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411c.jpg"></p><p>可以输入docker images查看</p><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411d.jpg"></p><p>3.创建mysql数据库管理软件容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myadmin -d --<span class="built_in">link</span> mysql-container:db -p 8880:80 phpmyadmin/phpmyadmin</span><br></pre></td></tr></table></figure><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411e.jpg"></p><p>回到docker查看下容器是否创建成功。<br>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411f.jpg"></p><p>复制地址到浏览器访问。<br>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411g.jpg"></p><p>​<img src="https://cdn.jsdelivr.net/gh/qfsysw/resources@1.3/v2/20240411h.jpg"></p><p>okok</p><p>唉哟不错哦~</p><p>扩展：ubuntu版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql-container -e TZ=UTC -p 30306:3306 -e MYSQL_ROOT_PASSWORD=xxxxxx ubuntu/mysql:8.0-22.04_beta</span><br></pre></td></tr></table></figure><p> <a href="https://hub.docker.com/r/ubuntu/mysql?uuid=D64B1F2A-A81A-4D2C-B66B-FCFAECE77EFE">https://hub.docker.com/r/ubuntu/mysql?uuid=D64B1F2A-A81A-4D2C-B66B-FCFAECE77EFE</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloud act</title>
      <link href="/2023/08/03/Cloud/"/>
      <url>/2023/08/03/Cloud/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a></p><p><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><p><a href="https://activity.huaweicloud.com/ecs.html">https://activity.huaweicloud.com/ecs.html</a></p><p><a href="https://www.jdcloud.com/cn/activity/promotions">https://www.jdcloud.com/cn/activity/promotions</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>100件小事</title>
      <link href="/2023/02/20/T100/"/>
      <url>/2023/02/20/T100/</url>
      
        <content type="html"><![CDATA[<br><div class="container grid-sm s-content posts">    <div class="column col-12">        <ol>                        <li class="done"><del>手牵手逛街</del></li>                        <li class="done"><del>一起看海</del></li>                        <li class="">一起看雪</li>                        <li class="done"><del>喂我吃东西</del></li>                        <li class="">一起堆雪人</li>                        <li class="done"><del>一起坐摩天轮</del></li>                        <li class="">一起恶作剧</li>                        <li class="done"><del>一起坐海盗船</del></li>                        <li class="done"><del>吃同一杯冰淇淋</del></li>                        <li class="done"><del>一起搬东西</del></li>                        <li class="done"><del>一起布置我们的小窝</del></li>                        <li class="">一起看日出</li>                        <li class="">一起看恐怖片</li>                        <li class="done"><del>送惊喜小礼物</del></li>                        <li class="done"><del>为我做顿饭</del></li>                        <li class="done"><del>一起看爱情片</del></li>                        <li class="done">一起看日落</li>                        <li class="done">一起数星星</li>                        <li class="done"><del>一起洗衣服</del></li>                        <li class="done"><del>一起听同一首曲子</del></li>                        <li class="done"><del>在朋友面前介绍我</del></li>                        <li class="done"><del>把肩膀借给我靠</del></li>                        <li class="done"><del>为我擦眼泪</del></li>                        <li class="done"><del>唱歌给我听</del></li>                        <li class="">为我写篇日记</li>                        <li class="done"><del>在大街上背我</del></li>                        <li class="done"><del>随叫随到</del></li>                        <li class="">一起看球赛</li>                        <li class="">比赛啃西瓜</li>                        <li class="">在沙滩上画心</li>                        <li class="">一起没形象的大叫</li>                        <li class="done">一起熬夜玩游戏</li>                        <li class="done"><del>为我系鞋带</del></li>                        <li class="done"><del>一起拉粑</del></li>                        <li class="done"><del>一起发呆</del></li>                        <li class="done"><del>一起过我们的纪念日</del></li>                        <li class="">一起做陶瓷</li>                        <li class="done">一起许愿</li>                        <li class="done"><del>一起做蛋糕</del></li>                        <li class="done"><del>学对方说话</del></li>                        <li class=""><del>一起模仿搞笑的事情</del></li>                        <li class="done"><del>为我剪指甲</del></li>                        <li class="done"><del>吃我剩下的饭饭</del></li>                        <li class="">把你欺负的对我没辙</li>                        <li class="">一起打水仗</li>                        <li class="done"><del>一起拍照片</del></li>                        <li class="">一起骑脚踏车</li>                        <li class=""><del>戴同一条围巾</del></li>                        <li class="">戴同一双手套</li>                        <li class=""><del>讲故事哄我睡觉</del></li>                        <li class="done"><del>一起吃棉花糖</del></li>                        <li class="done">一起唱歌</li>                        <li class="done"><del>一起淋雨</del></li>                        <li class="">一起面对所有难堪</li>                        <li class=""><del>一起爬山</del></li>                        <li class="">一起露营</li>                        <li class="done">一起跑步 </li>                        <li class="done"><del>一起傻笑</del></li>                        <li class="done"><del>一起吃路边摊</del></li>                        <li class="done"><del>一起去猫咖</del></li>                        <li class="done"><del>穿情侣装显摆</del></li>                        <li class="done"><del>一起打羽毛球 </del></li>                        <li class="done"><del>一起吃爱吃的东西到吐</del></li>                        <li class="done"><del>一起踩马路到脚软</del></li>                        <li class="done">一起去旅行 </li>                        <li class="">一起去动物园 </li>                        <li class="done"><del>咬一下你的脸颊</del></li>                        <li class="done"><del>对我说晚安</del></li>                        <li class="done"><del>一起看电影</del></li>                        <li class="done"><del>一起买菜</del></li>                        <li class="done"><del>比赛石头剪刀布</del></li>                        <li class="done"><del>一起见对方的朋友</del></li>                        <li class="done"><del>一起做鬼脸</del></li>                        <li class="">一起走遍世界各地</li>                        <li class="done"><del>一起吃大餐，牵手进去，扶墙出来</del></li>                        <li class="">一起扎气球赢奖品</li>                        <li class="">站在马路的两侧大喊</li>                        <li class="">看你打场比赛</li>                        <li class=""><del>一起看演唱会</del></li>                        <li class="">一起沿铁轨</li>                        <li class="done"><del>一起坐地铁</del></li>                        <li class="done"><del>一起放风筝</del></li>                        <li class="">一起看花田</li>                        <li class="done"><del>趁你睡觉偷亲你一下</del></li>                        <li class="">一起放孔明灯</li>                        <li class="">一起钓鱼</li>                        <li class=""><del>一起下棋</del></li>                        <li class="done"><del>一起在烈日下暴晒</del></li>                        <li class="done"><del>手机屏保设置对方的照片</del></li>                        <li class="done"><del>一起敷面膜 </del></li>                        <li class="done"><del>一起捏对方的脸</del></li>                        <li class="done"><del>打赌各种各样的事</del></li>                        <li class="done"><del>一起看烟火</del></li>                        <li class="">在树下埋下我们的约定</li>                        <li class="">去海边放漂流瓶</li>                        <li class="done"><del>拍一次婚纱照</del></li>                        <li class="done"><del>求婚</del></li>                        <li class="">结婚</li>                        <li class="">完成人生各项大事</li>                        <li class="">白头偕老</li>                    </ol>    </div></div><style>    @charset "UTF-8";a,abbr,address,article,aside,audio,b,blockquote,body,canvas,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,kbd,label,li,mark,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,u,ul,var,video {    margin: 0;    padding: 0;    border: 0;    vertical-align: baseline;    font: inherit;    font-size: 100%}.float_btns {display:none}.sidebar {display:none}body {    line-height: 1;    -webkit-text-size-adjust: none;    -ms-overflow-style: scrollbar}article,aside,details,figcaption,figure,footer,header,hgroup,nav,section {    display: block}button,input,select,textarea {    resize: none}ol,ul {    list-style: none}blockquote,q {    quotes: none}blockquote:after,blockquote:before,q:after,q:before {    content: '';    content: none}table {    border-collapse: collapse;    border-spacing: 0}*,:after,:before {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    box-sizing: border-box}body {    background: #FFF}html {    overflow-x: hidden;    -ms-text-size-adjust: 100%;    -webkit-text-size-adjust: 100%}::-moz-selection {    background-color: #EEE;    color: #000}::selection {    background-color: #EEE;    color: #000}body,input,select,textarea {    color: #444;    font-weight: 400;    font-size: .875rem;    font-family: -apple-system,BlinkMacSystemFont,Avenir,"Avenir Next","Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif;    line-height: 1.65;    text-rendering: geometricPrecision;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale}a {    color: #f15bb5;    text-decoration: none}a:hover {    color: #f15bb5}blockquote,dl,ol,p,pre,table,ul {    margin: 10px 0}blockquote,dl,form,ol,p,pre,ul {    letter-spacing: 1px}b,strong {    color: #555;    font-weight: 700}em,i {    font-style: italic}h1,h2,h3,h4,h5,h6 {    margin-top: 0;    margin-bottom: .25em;    color: inherit;    font-weight: 500}h1 {    font-size: 2rem}h2 {    font-size: 1.6rem}h3 {    font-size: 1.4rem}h4 {    font-size: 1.2rem}h5 {    font-size: 1rem}h6 {    font-size: .8rem}sub {    position: relative;    top: .5em;    font-size: .8em}sup {    position: relative;    top: -.5em;    font-size: .8em}blockquote {    padding: 0 15px;    border-left: solid 4px #ddd}code {    margin: .5em .5em;    padding: .25em .65em;    border: solid 1px rgba(144,144,144,.25);    border-radius: 4px;    background: rgba(144,144,144,.075);    font-size: .9em}pre {    font-size: .9em;    -webkit-overflow-scrolling: touch}pre code {    display: block;    overflow-x: auto;    padding: 1em 1.5em;    line-height: 1.75}ol {    padding-left: 1.25em;    list-style: decimal}ol li {    padding-left: .25em}ul {    padding-left: 1em;    list-style: disc}ul li {    padding-left: .5em}dl dt {    display: block;    margin: 0 0 1em 0;    font-weight: 700}dl dd {    margin-left: 2em}hr {    margin: 1em 0;    border: 0;    border-bottom: solid 1px rgba(144,144,144,.25)}hr.major {    margin: 3em 0}label {    display: block;    margin: 0 0 1em 0;    color: #555;    font-weight: 700;    font-size: .9em}table {    overflow: auto;    width: 100%;    border-collapse: collapse;    word-wrap: normal;    font-size: 12px;    border-spacing: 0;    word-break: normal}table tbody,table thead {    background: #f8f8f8}table td,table th {    padding: 6px 13px;    border: 1px solid #ddd}table th {    font-weight: 700}table tbody tr:hover {    background: #efefef}mark {    padding: .05rem;    border-radius: .1rem;    background: #b9e5ff;    color: #555}::-webkit-input-placeholder {    color: #bbb!important;    opacity: 1}:-moz-placeholder {    color: #bbb!important;    opacity: 1}::-moz-placeholder {    color: #bbb!important;    opacity: 1}:-ms-input-placeholder {    color: #bbb!important;    opacity: 1}.button,button,input[type=button],input[type=email],input[type=password],input[type=reset],input[type=submit],input[type=tel],input[type=text],select,textarea {    outline: 0;    border: 0;    border-radius: 4px;    text-decoration: none;    -moz-appearance: none;    -webkit-appearance: none;    -ms-appearance: none;    appearance: none}input[type=email],input[type=password],input[type=tel],input[type=text],select,textarea {    display: block;    padding: 0 1em;    width: 100%;    border: solid 1px rgba(144,144,144,.25);    background: rgba(144,144,144,.075);    color: inherit}input[type=email],input[type=password],input[type=text],select {    height: 2.75em}textarea {    padding: .75em 1em}.select-wrapper {    position: relative;    display: block;    text-decoration: none}.select-wrapper:before {    content: "\e815";    text-transform: none!important;    font-weight: 400;    font-style: normal;    font-family: fontello;    -moz-osx-font-smoothing: grayscale;    -webkit-font-smoothing: antialiased}.select-wrapper:before {    position: absolute;    top: 0;    right: 0;    display: block;    width: 2.75em;    height: 2.75em;    color: rgba(144,144,144,.25);    text-align: center;    line-height: 2.75em;    pointer-events: none}.select-wrapper select::-ms-expand {    display: none}input[type=checkbox],input[type=radio] {    z-index: -1;    float: left;    display: block;    margin-right: -2em;    width: 1em;    opacity: 0;    -moz-appearance: none;    -webkit-appearance: none;    -ms-appearance: none;    appearance: none}input[type=checkbox]+label,input[type=radio]+label {    position: relative;    display: inline-block;    padding-right: .75em;    padding-left: 2.4em;    color: #444;    text-decoration: none;    font-weight: 400;    font-size: 1em;    cursor: pointer}input[type=checkbox]+label:before,input[type=radio]+label:before {    text-transform: none!important;    font-weight: 400;    font-style: normal;    font-family: fontello;    -moz-osx-font-smoothing: grayscale;    -webkit-font-smoothing: antialiased}input[type=checkbox]+label:before,input[type=radio]+label:before {    position: absolute;    top: 0;    left: 0;    display: inline-block;    width: 1.65em;    height: 1.65em;    border: solid 1px rgba(144,144,144,.25);    border-radius: 4px;    background: rgba(144,144,144,.075);    content: '';    text-align: center;    line-height: 1.58125em}input[type=checkbox]:checked+label:before,input[type=radio]:checked+label:before {    border-color: #5a5a5a;    background: #5a5a5a;    color: #fff;    content: '\2713'}input[type=checkbox]+label:before {    border-radius: 4px}input[type=radio]+label:before {    border-radius: 100%}select {    padding-right: 1.1rem;    background: rgba(144,144,144,.075) url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23667189' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E") no-repeat right .35rem center/.4rem .5rem}select::-ms-expand {    display: none}select[multiple] {    height: auto}.button,button,input[type=button],input[type=reset],input[type=submit] {    display: inline-block;    padding: 0 1.5em;    height: 2.85em;    background-color: #5a5a5a;    color: #fff!important;    text-align: center;    white-space: nowrap;    letter-spacing: 2px;    line-height: 2.95em;    cursor: pointer;    -webkit-transition: background-color .2s ease-in-out,color .2s ease-in-out;    -moz-transition: background-color .2s ease-in-out,color .2s ease-in-out;    transition: background-color .2s ease-in-out,color .2s ease-in-out;    -ms-transition: background-color .2s ease-in-out,color .2s ease-in-out}.button,button:hover,input[type=button]:hover,input[type=reset]:hover,input[type=submit]:hover {    background-color: #676767}.button,button:active,input[type=button]:active,input[type=reset]:active,input[type=submit]:active {    background-color: #4d4d4d}.button.alt,button.alt,input[type=button].alt,input[type=reset].alt,input[type=submit].alt {    background-color: transparent;    box-shadow: inset 0 0 0 2px rgba(144,144,144,.25);    color: #555!important}.button.alt:hover,button.alt:hover,input[type=button].alt:hover,input[type=reset].alt:hover,input[type=submit].alt:hover {    background-color: rgba(144,144,144,.075)}.button.alt:active,button.alt:active,input[type=button].alt:active,input[type=reset].alt:active,input[type=submit].alt:active {    background-color: rgba(144,144,144,.2)}.button.disabled,.button:disabled,button.disabled,button:disabled,input[type=button].disabled,input[type=button]:disabled,input[type=reset].disabled,input[type=reset]:disabled,input[type=submit].disabled,input[type=submit]:disabled {    background-color: #444!important;    box-shadow: inset 0 -.15em 0 0 rgba(0,0,0,.15);    color: #fff!important;    opacity: .25;    cursor: not-allowed}.container {    margin-right: auto;    margin-left: auto;    padding-right: .4rem;    padding-left: .4rem;    width: 100%}.container.grid-xl {    max-width: 1296px}.container.grid-lg {    max-width: 976px}.container.grid-md {    max-width: 856px}.container.grid-sm {    max-width: 680px}.container.grid-xs {    max-width: 496px}.show-lg,.show-md,.show-sm,.show-xl,.show-xs {    display: none!important}.columns {    display: flex;    display: -ms-flexbox;    margin-right: -.4rem;    margin-left: -.4rem;    -ms-flex-wrap: wrap;    flex-wrap: wrap}.columns.col-gapless {    margin-right: 0;    margin-left: 0}.columns.col-gapless>.column {    padding-right: 0;    padding-left: 0}.columns.col-oneline {    overflow-x: auto;    -ms-flex-wrap: nowrap;    flex-wrap: nowrap}.column {    padding-right: .4rem;    padding-left: .4rem;    max-width: 100%;    -ms-flex: 1;    flex: 1}.column.col-1,.column.col-10,.column.col-11,.column.col-12,.column.col-2,.column.col-3,.column.col-4,.column.col-5,.column.col-6,.column.col-7,.column.col-8,.column.col-9 {    -ms-flex: none;    flex: none}.s-content .column {    padding: .5rem}.col-12 {    width: 100%}.col-11 {    width: 91.66666667%}.col-10 {    width: 83.33333333%}.col-9 {    width: 75%}.col-8 {    width: 66.66666667%}.col-7 {    width: 58.33333333%}.col-6 {    width: 50%}.col-5 {    width: 41.66666667%}.col-4 {    width: 33.33333333%}.col-3 {    width: 25%}.col-2 {    width: 16.66666667%}.col-1 {    width: 8.33333333%}.col-auto {    width: auto;    max-width: none;    -ms-flex: 0 0 auto;    flex: 0 0 auto}.col-mx-auto {    margin-right: auto;    margin-left: auto}.col-ml-auto {    margin-left: auto}.col-mr-auto {    margin-right: auto}@media (max-width: 1280px) {    .col-xl-1,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9 {        -ms-flex:none;        flex: none    }    .col-xl-12 {        width: 100%    }    .col-xl-11 {        width: 91.66666667%    }    .col-xl-10 {        width: 83.33333333%    }    .col-xl-9 {        width: 75%    }    .col-xl-8 {        width: 66.66666667%    }    .col-xl-7 {        width: 58.33333333%    }    .col-xl-6 {        width: 50%    }    .col-xl-5 {        width: 41.66666667%    }    .col-xl-4 {        width: 33.33333333%    }    .col-xl-3 {        width: 25%    }    .col-xl-2 {        width: 16.66666667%    }    .col-xl-1 {        width: 8.33333333%    }    .hide-xl {        display: none!important    }    .show-xl {        display: block!important    }}@media (max-width: 960px) {    .col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9 {        -ms-flex:none;        flex: none    }    .col-lg-12 {        width: 100%    }    .col-lg-11 {        width: 91.66666667%    }    .col-lg-10 {        width: 83.33333333%    }    .col-lg-9 {        width: 75%    }    .col-lg-8 {        width: 66.66666667%    }    .col-lg-7 {        width: 58.33333333%    }    .col-lg-6 {        width: 50%    }    .col-lg-5 {        width: 41.66666667%    }    .col-lg-4 {        width: 33.33333333%    }    .col-lg-3 {        width: 25%    }    .col-lg-2 {        width: 16.66666667%    }    .col-lg-1 {        width: 8.33333333%    }    .hide-lg {        display: none!important    }    .show-lg {        display: block!important    }}@media (max-width: 840px) {    .col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9 {        -ms-flex:none;        flex: none    }    .col-md-12 {        width: 100%    }    .col-md-11 {        width: 91.66666667%    }    .col-md-10 {        width: 83.33333333%    }    .col-md-9 {        width: 75%    }    .col-md-8 {        width: 66.66666667%    }    .col-md-7 {        width: 58.33333333%    }    .col-md-6 {        width: 50%    }    .col-md-5 {        width: 41.66666667%    }    .col-md-4 {        width: 33.33333333%    }    .col-md-3 {        width: 25%    }    .col-md-2 {        width: 16.66666667%    }    .col-md-1 {        width: 8.33333333%    }    .hide-md {        display: none!important    }    .show-md {        display: block!important    }}@media (max-width: 600px) {    .col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9 {        -ms-flex:none;        flex: none    }    .col-sm-12 {        width: 100%    }    .col-sm-11 {        width: 91.66666667%    }    .col-sm-10 {        width: 83.33333333%    }    .col-sm-9 {        width: 75%    }    .col-sm-8 {        width: 66.66666667%    }    .col-sm-7 {        width: 58.33333333%    }    .col-sm-6 {        width: 50%    }    .col-sm-5 {        width: 41.66666667%    }    .col-sm-4 {        width: 33.33333333%    }    .col-sm-3 {        width: 25%    }    .col-sm-2 {        width: 16.66666667%    }    .col-sm-1 {        width: 8.33333333%    }    .hide-sm {        display: none!important    }    .show-sm {        display: block!important    }}@media (max-width: 480px) {    .col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9 {        -ms-flex:none;        flex: none    }    .col-xs-12 {        width: 100%    }    .col-xs-11 {        width: 91.66666667%    }    .col-xs-10 {        width: 83.33333333%    }    .col-xs-9 {        width: 75%    }    .col-xs-8 {        width: 66.66666667%    }    .col-xs-7 {        width: 58.33333333%    }    .col-xs-6 {        width: 50%    }    .col-xs-5 {        width: 41.66666667%    }    .col-xs-4 {        width: 33.33333333%    }    .col-xs-3 {        width: 25%    }    .col-xs-2 {        width: 16.66666667%    }    .col-xs-1 {        width: 8.33333333%    }    .hide-xs {        display: none!important    }    .show-xs {        display: block!important    }}.horizontal-align {    display: flex;    justify-content: center}.header {    padding: 50px 0 0}.header .column {    padding: 0}.logo {    display: inline-block;    margin: 0 20px 0 10px;    vertical-align: middle;    font-size: 72px}.logo .i-love {    position: relative;    top: -6px;    width: 69px;    height: 69px;    background: url(img/love.png) no-repeat 0 0;    vertical-align: middle}.ico {    display: inline-block;    width: 16px;    height: 16px;    vertical-align: middle}.logo a {    color: #383838;    font-weight: 700}.description {    display: inline-block;    vertical-align: middle;    letter-spacing: normal;    font-size: 14px}.description a {    border-bottom: 1px solid #f15bb5}.posts {    padding: 0}.posts ol {    margin-left: -30px;    padding-left: 30px}.posts li {    padding: 10px;    border-top: 1px solid #e5e5e5}.posts li p {    margin: 0}.posts li:hover {    background: #f4f4f4}.footer {    color: #999;    font-size: 12px}.footer p:first-child {    margin-top: 0;    padding-top: 1rem;    border-top: 1px solid #e6e6e6}.footer .column {    padding-right: 0;    padding-left: 0}.comments .column {    padding: 0}.comment-form input {    padding: 0 40px 0 18px;    width: 100%;    height: 2.75em;    outline: 0;    border: 1px solid rgba(184,197,214,.2);    background-color: #fff;    -webkit-box-shadow: 0 1px 4px rgba(0,0,0,.1);    box-shadow: 0 1px 4px rgba(0,0,0,.1);    -webkit-appearance: none}.comment-form textarea {    outline: 0;    border: 1px solid rgba(184,197,214,.2);    background-color: #fff;    -webkit-box-shadow: 0 1px 4px rgba(0,0,0,.1);    box-shadow: 0 1px 4px rgba(0,0,0,.1);    -webkit-appearance: none}.comment-form button {    margin-top: 16px;    background-color: #f36;    color: #fff!important}.comment-hr {    margin: 20px 0;    border-top: 2px solid #f15bb5}.comment-list {    margin: 0;    padding: 0;    list-style-type: none}.comment-header {    font-size: 12px}.comment-author {    color: #f15bb5}.comment-content {    margin-left: 60px;    border-radius: 5px;    color: #999;    font-size: 12px}.comment-content p {    margin: 0}.arrow {    position: absolute;    top: 4px;    left: -5px;    display: inline-block;    overflow: hidden;    width: 0;    height: 0;    border-width: 4px 4px 4px 0;    font: 0/0 arial;    border-right-color: #dcdcdc}.larr-in {    left: -4px;    border-right-color: #f8faff}.larr,.larr-in {    border-right-style: solid!important}.larr,.larr-in {    border-top-color: transparent!important;    border-bottom-color: transparent!important;    border-top-style: dashed!important;    border-bottom-style: dashed!important}.comment-header .avatar {    float: left;    display: inline-block;    width: 50px;    height: 50px;    border: 1px solid #eaeaea;    border-radius: 50%}.comment-reply {    float: right}#cancel-comment-reply-link {    margin-left: 16px}.comment-view {    padding: 4px 0;    min-height: 60px;    border-bottom: 1px dotted #e5e5e5}.comment-child {    padding-left: 60px}.lists-navigator {    margin: 20px 0}.lists-navigator ol {    padding: 0 10px;    list-style: none;    text-align: center}.lists-navigator ol li {    display: inline-block;    color: #999}.lists-navigator ol li a {    padding: 0 5px;    color: #999}.lists-navigator ol li.current a {    color: #f15bb5}.done {    color: #999;    font-style: italic}.comment-author-approve {    padding: .1rem .25rem;    border-radius: .25rem;    background-color: #f36;    color: #FFF}.top {    float: right}.comment-author-at {    float: left;    margin-right: 5px}.links {    border-top: 1px solid #e6e6e6}.links ul {    overflow: hidden;    margin: 0;    padding: 0;    margin-top: 16px;    list-style: none}.links ul li {    position: relative;    float: left;    width: 50%;    border-radius: 5px;    list-style: none}.links ul li:hover {    background: rgba(155,155,155,.1)}.links ul li a {    display: block;    padding: 0 10px 0 90px;    height: 90px;    color: #444}.links ul li a img {    position: absolute;    top: 15px;    left: 15px;    margin: 0;    width: 60px;    height: 60px;    border-radius: 50%;    cursor: pointer}.links ul li a h4 {    padding-top: 20px;    font-size: 13px}.links ul li a p {    font-size: 12px}.links ul li a h4,.links ul li a p {    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap}@media (max-width: 720px) {    .header .column {        padding:.5rem    }    .posts ol {        margin-left: 0;        padding: 0 40px    }    .comments .column {        padding: 0 15px    }    .footer .column {        padding: .5rem 15px    }    .links ul li {        width: 100%    }}@media (max-width: 636px) {    .header {        padding:0    }    .header .column {        text-align: center    }}</style><!-- nofound 落石自我怀疑0511  0803爷爷奶奶没有输给战火，爸爸妈妈没有输给贫穷，而我却输给和平年代的生活。。。 -->]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
